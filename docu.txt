Dokumentation der App MasteryX
Ziel: Übung von Grundfertigkeiten in unterschiedlichen Lerndomänen, Fachern mit sofortigem, formativem Feedback.
Für das Feedback ist entweder eine korrekte Antwort hinterlegt oder es gibt ein LLM-generiertes Feedback, wenn
es um die Fehlerart geht (Grammatik) bzw. Lösungen multikriterial bewertet werden müssen (Schreiben).

Aufbau der APP:
1. Kleinstes Bauelement sind Übungsaufgaben, zunächst nur eine Aufgabenformat:
    - Text/Bild, Fragestellung, Eingabefeld
    - Feedback einblenden (Art LLM oder statisch)
    - Überarbeitung und weiteres FB
    - Festlegen, wie häufig Überarbeitung möglich
    - Zuordnung zu einem oder mehreren Lernzielen

2. Aufgaben werden entlang von Lernzielen zu Übungssequenzen zusammengeschaltet
    - Anzahl Aufgaben pro Lernziel
    - Zufallsauswahl
    - Start, Fortschrittszähler, Ende mit Score und verbalem Feedback

3. Relationale Datenbankstruktur
    - Aufgabentabelle
    - Lernziele in einer Tabelle
    - Themen in einer Tabelle

4. Logging aller Aktivitäten sowie Ein- und Ausgaben der App auf Session-Ebene (Session ID)
    - Öffnen der App im Browser: SessionID
    - eine Übungssequenz: PracticeID


Verzeichnisstruktur (Django):
MYX25 (Hauptordner, virtuelle Umgebung)
    env
    masteryx (main project package)
        init.py
        asgi.py  (async server entry point)
        settings.py (project settings, database, apps)
        urls.py (root url routes)
        wsgi.py
    media
    myx_stud (App für Lernende im Projekt)
        management
        migrations
        static
        templates
        utils
        admin.py (admin config for this app)
        models.py (database models)
        urls.py (app routes)
        ...
    .env
    .gitignore
    dp.sqlite3
    docu.txt
    manage.py (command line utility for Django)
    requirements.txt



Änderungen deployen (immer, wenn du auf GitHub etwas Neues gepusht hast)
Der Projektordner in pythonanywhere ist:
/home/masteryx/myx2025/   (entspricht dem Projektordner hier in VS-Code)

1. **Lokal kurz prüfen**
* Beende den lokalen Server.
* Stelle sicher, dass alle Migrationen angewendet sind:
  ```bash
  python manage.py makemigrations
  python manage.py migrate
  ```
* Merke dir den Pfad zu deiner lokalen `db.sqlite3` (normal: im Projekt-Root).

2. **PythonAnywhere: venv & Code bereit machen**
* Auf PA eine **Bash-Konsole** öffnen:
  ```bash
  cd /home/masteryx/myx2025
  source ~/.venv/myx2025/bin/activate
  git pull
  pip install -r requirements.txt
 ```
  (Wenn das venv noch nicht existiert, erst anlegen; sonst wie oben.)

3. **Alte DB auf PA löschen**
* In der Bash:
  ```bash
  cd /home/masteryx/myx2025
  rm -f db.sqlite3
  ```
  (Falls deine Datei anders heißt, Namen anpassen.)

4. **Neue DB hochladen**
* In PythonAnywhere → **Files**-Tab → zu `/home/masteryx/myx2025` navigieren.
* **Upload** klicken und deine **lokale `db.sqlite3`** auswählen/hochladen.
  > Hinweis: `db.sqlite3` ist oft in `.gitignore`. Hochladen geht daher am besten über das Files-UI (nicht Git).

5. **(Optional) Migrations „no-op“ laufen lassen**
* Schadet nicht, falls minimale Unterschiede bestehen:
  ```bash
  cd /home/masteryx/myx2025
  source ~/.venvs/myx2025/bin/activate
  python manage.py migrate
  ```

6. **Static Files & Reload**
* Einmal Static sammeln:
  ```bash
  python manage.py collectstatic --noinput
  ```
* Web-Tab → **Reload**.

## Pflicht-Checks (Produktion)
* In `settings.py`:
  * `DEBUG = False`
  * `ALLOWED_HOSTS = ["masteryx.pythonanywhere.com"]`
  * `CSRF_TRUSTED_ORIGINS = ["https://masteryx.pythonanywhere.com"]` (Django ≥4)
  * `STATIC_ROOT = BASE_DIR / "staticfiles"`
  * `DATABASES['default']['NAME'] = BASE_DIR / "db.sqlite3"` (oder dein Dateiname)
* Web-Tab → **Static files**:
  URL: `/static/` → Pfad: `/home/masteryx/myx2025/staticfiles`
* WSGI-Datei `/var/www/masteryx_pythonanywhere_com_wsgi.py` zeigt auf `myx2025.settings`.




Django.admin Superuser
uwe.maier@ph-gmuend.de
Username: lyg426
Passwort: supermaster

Neuen Superuser anlegen:
python manage.py createsuperuser

Starten in VS-Code
env\Scripts\activate
python manage.py runserver